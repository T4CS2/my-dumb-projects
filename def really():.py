import os
import time
import random

def loading():
    print('Loading...')
    time.sleep(random.uniform(0.1, 1.0))
    os.system('clear')
    print('10% [# _ _ _ _ _ _ _ _ _]')
    time.sleep(random.uniform(0.1, 1.0))
    os.system('clear')
    print('20% [# # _ _ _ _ _ _ _ _]')
    time.sleep(random.uniform(0.1, 1.0))
    os.system('clear')
    print('30% [# # # _ _ _ _ _ _ _]')
    time.sleep(random.uniform(0.1, 1.0))
    os.system('clear')
    print('40% [# # # # _ _ _ _ _ _]')
    time.sleep(random.uniform(0.1, 1.0))
    os.system('clear')
    print('50% [# # # # # _ _ _ _ _]')
    time.sleep(random.uniform(0.1, 1.0))
    os.system('clear')
    print('60% [# # # # # # _ _ _ _]')
    time.sleep(random.uniform(0.1, 1.0))
    os.system('clear')
    print('70% [# # # # # # # _ _ _]')
    time.sleep(random.uniform(0.1, 1.0))
    os.system('clear')
    print('80% [# # # # # # # # _ _]')
    time.sleep(random.uniform(0.1, 1.0))
    os.system('clear')
    print('90% [# # # # # # # # # _]')
    time.sleep(random.uniform(0.1, 1.0))
    os.system('clear')
    print('100% [# # # # # # # # # #]')
    os.system('clear')
2

print("Debugging in VS Code called back immediately and responded with precision.")
time.sleep(0.001)
print("Python syntax highlighting in VS Code called back swiftly and responded accurately.")
time.sleep(0.001)
print("VS Code extensions for math called back promptly and responded efficiently.")
time.sleep(0.001)
print("Python libraries in VS Code called back instantly and responded effectively.")
time.sleep(0.001)
print("Mathematical formulas in VS Code called back promptly and responded elegantly.")
time.sleep(0.001)
print("Debugging Python code in VS Code called back quickly and responded flawlessly.")
time.sleep(0.001)
print("Python scripts executed in VS Code called back immediately and responded gracefully.")
time.sleep(0.001)
print("VS Code's IntelliSense for Python called back rapidly and responded intelligently.")
time.sleep(0.001)
print("Mathematical calculations in VS Code called back swiftly and responded logically.")
time.sleep(0.001)
print("Running Python tests in VS Code called back promptly and responded accurately.")
time.sleep(0.001)
print("Integration of Jupyter notebooks in VS Code called back smoothly and responded seamlessly.")
time.sleep(0.001)
print("Using Git in VS Code called back efficiently and responded accurately.")
time.sleep(0.001)
print("Collaborative coding in VS Code called back swiftly and responded cohesively.")
time.sleep(0.001)
print("Refactoring code in VS Code called back promptly and responded effectively.")
time.sleep(0.001)
print("Using Python virtual environments in VS Code called back seamlessly and responded efficiently.")
time.sleep(0.001)
print("Analyzing code in VS Code called back quickly and responded accurately.")
time.sleep(0.001)
print("Customizing VS Code settings called back smoothly and responded accurately.")
time.sleep(0.001)
print("Navigating code in VS Code called back swiftly and responded intuitively.")
time.sleep(0.001)
print("VS Code's code snippets called back promptly and responded conveniently.")
time.sleep(0.001)
print("Using extensions in VS Code called back efficiently and responded effectively.")
time.sleep(0.001)
print("Managing project folders in VS Code called back swiftly and responded seamlessly.")
time.sleep(0.001)
print("Debugging JavaScript code in VS Code called back instantly and responded accurately.")
time.sleep(0.001)
print("Writing unit tests in VS Code called back promptly and responded flawlessly.")
time.sleep(0.001)
print("Organizing code with VS Code's outline view called back smoothly and responded intuitively.")
time.sleep(0.001)
print("Customizing key bindings in VS Code called back rapidly and responded accurately.")
time.sleep(0.001)
print("Setting up linters and formatters in VS Code called back promptly and responded effectively.")
time.sleep(0.001)
print("Reviewing code changes in VS Code's source control called back swiftly and responded cohesively.")
time.sleep(0.001)
print("Searching for code snippets in VS Code's marketplace called back smoothly and responded efficiently.")
time.sleep(0.001)
print("Using Docker with VS Code called back promptly and responded accurately.")
time.sleep(0.001)
print("Setting breakpoints in VS Code's debugger called back quickly and responded flawlessly.")
time.sleep(0.001)
print("Using VS Code's terminal for command-line tasks called back efficiently and responded seamlessly.")
time.sleep(0.001)
print("Exploring Python documentation in VS Code called back instantly and responded effectively.")
time.sleep(0.001)
print("Working with databases in VS Code called back swiftly and responded logically.")
time.sleep(0.001)
print("Integrating GitHub Actions with VS Code called back promptly and responded accurately.")
time.sleep(0.001)
print("Customizing VS Code themes called back smoothly and responded intuitively.")
time.sleep(0.001)
print("Using VS Code's built-in version control called back rapidly and responded accurately.")
time.sleep(0.001)
print("Automating tasks with VS Code's task runner called back promptly and responded effectively.")
time.sleep(0.001)
print("Writing Python documentation in VS Code called back quickly and responded seamlessly.")
time.sleep(0.001)
print("Using VS Code's integrated terminal for Python scripts called back efficiently and responded accurately.")
time.sleep(0.001)
print("Exploring project dependencies with VS Code's package explorer called back smoothly and responded intuitively.")
time.sleep(0.001)
print("Configuring project settings with VS Code's workspace configuration called back promptly and responded flawlessly.")
time.sleep(0.001)
print("Writing clean code in VS Code called back rapidly and responded accurately.")
time.sleep(0.001)
print("Analyzing code coverage with VS Code's coverage gutters called back swiftly and responded cohesively.")
time.sleep(0.001)
print("Setting up virtual environments with VS Code's Python extension called back efficiently and responded seamlessly.")
time.sleep(0.001)
print("Customizing VS Code's editor layout called back smoothly and responded intuitively.")
time.sleep(0.001)
print("Using VS Code's built-in snippets called back promptly and responded effectively.")
time.sleep(0.001)
print("Collaborating with teammates using VS Code's Live Share called back rapidly and responded accurately.")
time.sleep(0.001)
print("Customizing Python linting settings in VS Code called back swiftly and responded cohesively.")
time.sleep(0.001)
print("Refactoring code with VS Code's built-in refactorings called back promptly and responded flawlessly.")
time.sleep(0.001)
print("Writing efficient loops in Python using VS Code called back efficiently and responded seamlessly.")
time.sleep(0.001)
print("Managing project dependencies with VS Code's package manager called back smoothly and responded intuitively.")

time.sleep(0.1)
print(' ')
print('Loaded successfully!')
print('T4CS ENGINE STABLE')
time.sleep(1)
os.system('clear')

def multiply():
    digit1 = int(input("Input the first digit: "))
    digit2 = int(input("Input the second digit: "))

    multiply_answer = digit1 * digit2 
    print(str(digit1) + ' multiplied by ' + str(digit2) + ' is ' + str(multiply_answer))
    time.sleep(3)
    print('Would you like to calculate again?')
    print('Y/N')
    again = input()
    if again.lower() == 'y':
        print('Okay!')
        time.sleep(0.5)
        afterlogin()
    elif again.lower() == 'n':
        print("Okay! See you next time!")
        time.sleep(1)
        os.system('clear')
    else:
        print('Invalid response.')

def divide():
    digit1 = int(input("Input the first digit: "))
    digit2 = int(input("Input the second digit: "))

    if digit2 == 0:
        print("Cannot divide by zero.")
        return

    divide_answer = digit1 / digit2 
    print(str(digit1) + ' divided by ' + str(digit2) + ' is ' + str(divide_answer))
    time.sleep(3)
    print('Would you like to calculate again?')
    print('Y/N')
    again = input()
    if again.lower() == 'y':
        print('Okay!')
        time.sleep(0.5)
        afterlogin()
    elif again.lower() == 'n':
        print("Okay! See you next time!")
        time.sleep(1)
        os.system('clear')
    else:
        print('Invalid response.')

def addition():
    digit1 = int(input("Input the first digit: "))
    digit2 = int(input("Input the second digit: "))

    addition_answer = digit1 + digit2 
    print(str(digit1) + ' added to ' + str(digit2) + ' is ' + str(addition_answer))
    time.sleep(3)
    print('Would you like to calculate again?')
    print('Y/N')
    again = input()
    if again.lower() == 'y':
        print('Okay!')        
        time.sleep(0.5)
        afterlogin()
    elif again.lower() == 'n':
        print("Okay! See you next time!")
        time.sleep(1)
        os.system('clear')
    else:
        print('Invalid response.')

def subtract():
    digit1 = int(input("Input the first digit: "))
    digit2 = int(input("Input the second digit: "))

    subtraction_answer = digit1 - digit2 
    print(str(digit2) + ' subtracted from ' + str(digit1) + ' is ' + str(subtraction_answer))
    time.sleep(3)
    print('Would you like to calculate again?')
    print('Y/N')
    again = input()
    if again.lower() == 'y':
        print('Okay!')
        time.sleep(0.5)
        afterlogin()
        
    elif again.lower() == 'n':
        print("Okay! See you next time!")
        time.sleep(1)
        os.system('clear')
    else:
        print('Invalid response.')

def afterlogin():
     print("Welcome to T4CS's calculator!")
     time.sleep(0.5)
     print('Pick any of these options.')
     print(' ')
     time.sleep(0.5)
     print('1. Multiplication ')
     time.sleep(0.5)
     print('2. Division ')
     time.sleep(0.5)
     print('3. Subtraction ')
     time.sleep(0.5)
     print('4. Addition ')
     print(' ')
     options = input('Pick one: ')
     
     if options == '1' or options.lower() == 'multiplication':     
         multiply()
     elif options == '2' or options.lower() == 'division':
         divide()
     elif options == '3' or options.lower() == 'subtraction':
         subtract()
     elif options == '4' or options.lower() == 'addition':
         addition()
     else:
         print('Invalid option :( ')

loading()
afterlogin()